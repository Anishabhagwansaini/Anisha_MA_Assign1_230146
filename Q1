//part1
//using Moore Majority Vote Algorithm,

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0;//count keeps track of the "vote balance" for the current candidate
        int candidate = 0;//candidate holds your current guess for the majority element.

        for (int num : nums) {
            if (count == 0) {
                candidate = num; // choose a new candidate
            }
            count += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }
};


//part2
// in this we have two counters and two candidates

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int count1 = 0, count2 = 0;
        int candidate1 = 0, candidate2 = 1; // Initialize to different values

        // First pass: find candidates
        for (int num : nums) {
            if (num == candidate1) {//If current number matches one of the candidates → increase count
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {//If one of the counts is 0 → assign current number as new candidate.
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {//Else (number matches neither candidate and both counts are non-zero) → decrease both counts (like "voting out").
                count1--;
                count2--;
            }
        }

        // Second pass: verify candidates
        //After the first loop, we may have two candidates. But we need to check if they really appear more than n/3 times.
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == candidate1) count1++;
            else if (num == candidate2) count2++;
        }

        vector<int> result;
//If either candidate appears more than n/3 times, we add it to the result.


        if (count1 > n / 3) result.push_back(candidate1);
        if (count2 > n / 3) result.push_back(candidate2);

        return result;
    }
};
